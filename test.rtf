unsigned select_kth_smallest(vector<unsigned> q, size_t k);
unsigned choose_mid(vector<unsigned>& q, unsigned left, unsigned right);
unsigned selection(vector<unsigned> v);

unsigned select_kth_smallest(vector<unsigned> q, size_t k){
    unsigned bot = 0, top = q.size();
    while(bot < top){
        unsigned left = bot, right = bot, i;
        unsigned index = choose_mid(q, bot, top);
        while(right < top){
            if(q[right] < index){
                unsigned temp = q[left];
                q[left] = q[right];
                q[right] = temp;
                left++;
            }
            if(q[right] == index)
                i = right;
            right++;
        }
        q[i] = q[left];
        q[left] = index;
        /*
        for(unsigned a=0; a<q.size(); a++)
            cout<< q[a]<< ' ';
        cout<< endl;
        cout<< index<< endl;
        cout<< bot<< ' '<< top<< endl;
        cout<< left<< ' '<< right<< endl; 
        */
        if(left+1 < k)
            bot = left + 1;
        else if(left+1 > k)
            top = left;
        else
            return index;
    }
    return -1;
}

unsigned choose_mid(vector<unsigned>& q, unsigned left, unsigned right){
    vector<unsigned> v;
    while(left+5 < right){
        unsigned mid = selection(vector<unsigned>(&q[left], &q[left+5]));
        v.push_back(mid);
        left += 5;
    }
    unsigned mid = selection(vector<unsigned>(&q[left], &q[right]));
    v.push_back(mid);

    return selection(v);
}

unsigned selection(vector<unsigned> v){
    unsigned size = v.size();
    for(unsigned a=1; a<size; a++){
        unsigned b = a;
        unsigned temp = v[b];
        while(b>0 && temp<v[b-1]){
            v[b] = v[b-1];
            b--;
        }
        v[b] = temp;
    }
    unsigned mid = (size-1)/2;

    return v[mid];
}